openapi: 3.0.0
info:
  version: 1.0.0
  title: test API
  description: Swagger open api 3.0 연습
servers:
  - url: http://localhost:{port}/{basePath}
    description: Local Server
    variables:
      port:
        default: 3000
      basePath:
        default: api
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Board:
      $ref: ./swagger/definitions/Board.yaml
    Code:
      $ref: ./swagger/definitions/Code.yaml
    File:
      $ref: ./swagger/definitions/File.yaml
    Font:
      $ref: ./swagger/definitions/Font.yaml
    User:
      $ref: ./swagger/definitions/User.yaml
  responses:
    SUCCESS:
      $ref: ./swagger/res/SUCCESS.yaml
    ERR_BAD_REQUEST:
      $ref: ./swagger/res/ERR_BAD_REQUEST.yaml
    ERR_EXIST_EMAIL:
      $ref: ./swagger/res/ERR_EXIST_EMAIL.yaml
    ERR_EXIST_NICKNAME:
      $ref: ./swagger/res/ERR_EXIST_NICKNAME.yaml
    ERR_INTERNAL_ERROR:
      $ref: ./swagger/res/ERR_INTERNAL_ERROR.yaml
    ERR_INVALID_EMAIL:
      $ref: ./swagger/res/ERR_INVALID_EMAIL.yaml
    ERR_INVALID_EMAIL_PWD:
      $ref: ./swagger/res/ERR_INVALID_EMAIL_PWD.yaml
    ERR_INVALID_PARAM:
      $ref: ./swagger/res/ERR_INVALID_PARAM.yaml
    ERR_INVALID_PWD:
      $ref: ./swagger/res/ERR_INVALID_PWD.yaml
    ERR_INVALID_REQUEST:
      $ref: ./swagger/res/ERR_INVALID_REQUEST.yaml
    ERR_NOT_EXIST:
      $ref: ./swagger/res/ERR_NOT_EXIST.yaml
    ERR_NOT_FOUND:
      $ref: ./swagger/res/ERR_NOT_FOUND.yaml
    
    
paths:
  # /auth
  /auth/sign-up:
    post:
      tags: ['Auth']
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                nickname:
                  type: string
                address:
                  type: string
                birthDay:
                  type: string
                  format: date
              required:
                - email
                - password
                - nickname
                - address
                - birthDay
            examples:
              200:
                value:
                  email: "kyw0177@gmail.com"
                  password: "asdf1234*"
                  nickname: "cat"
                  address: "cat's house"
                  birthDay: "2001-01-31"
              400:
                value:
                  email: ""
                  password: ""
                  nickname: "cat"
                  address: "cat's house"
                  birthDay: "2001-01-31"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
                ERR_EXIST_EMAIL:
                  $ref: '#/components/responses/ERR_EXIST_EMAIL'
                ERR_EXIST_NICKNAME:
                  $ref: '#/components/responses/ERR_EXIST_NICKNAME'
                ERR_INVALID_EMAIL:
                  $ref: '#/components/responses/ERR_INVALID_EMAIL'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /auth/sign-in:
    post:
      tags: ['Auth']
      summary: 로그인
      requestBody:
        requied: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: kyw017763@gmail.com
                password:
                  type: string
                  format: password
                  example: asdf1234
            examples:
              200:
                value:
                  email: "kyw0177@gmail.com"
                  password: "asdf1234*"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /auth/sign-up/verify:
    post:
      tags: ['Auth']
      summary: 인증 이메일 보내기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            examples:
              200:
                value:
                  email: "kyw0177@gmail.com"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'
    get:
      tags: ['Auth']
      summary: 이메일 인증
      parameters:
        - in: query
          name: email
          description: 인증코드를 수신한 이메일
          schema:
            type: string
            format: email
          required: true
        - in: query
          name: code
          description: 인증코드
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /auth/jwt-verify:
    post:
      tags: ['Auth']
      summary: JWT 토큰 검증
      security:
        - BearerAuth: []
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  # boards
  /boards:
    get:
      tags: ['Board']
      summary: board 컬렉션 가져오기
      parameters:
        - in: query
          name: searchString
          description: 검색어
          schema:
            type: string
        - in: query
          name: sortKey
          description: 정렬 키
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS:
                  value:
                    message: 'success'
                    data: [
                      {
                        "_id": "5ef593a05304681d19bd3a4e",
                        "userId": "5ef31dace482ad8976aeb211",
                        "title": "wfwe",
                        "createdAt": "2020-06-26T06:20:16.160Z",
                        "likes": 0,
                        "reports": 0,
                        "isDeleted": false,
                        "username": "someone"
                      },
                      {
                        "_id": "5ef592a55304681d19bd3a4d",
                        "userId": "5ef31dace482ad8976aeb211",
                        "title": "we",
                        "createdAt": "2020-06-26T06:16:05.208Z",
                        "likes": 0,
                        "reports": 0,
                        "isDeleted": false,
                        "username": "someone"
                      },
                      {
                        "_id": "5edd9db4f2f1cc1fb8bef671",
                        "userId": "5ed9f4d01ca3427b81e17859",
                        "title": "Yes Nope No No Yes",
                        "createdAt": "2020-06-08T02:08:52.519Z",
                        "likes": 0,
                        "reports": 0,
                        "isDeleted": false,
                        "username": "someone"
                      }
                    ]
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'
    
    post:
      tags: ['Board']
      summary: board 도큐먼트 추가
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
              required:
                - title
                - body
            examples:
              200:
                value:
                  title: "테스트 글 제목"
                  body: "테스트 글 내용"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{id}:
    get:
      tags: ['Board']
      summary: board 도큐먼트 가져오기
      parameters:
        - in: path
          name: id
          required: true
          description: 가져올 board 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  value:
                    message: 'success'
                    data: {
                      "_id": "5eda04e69014168b95dc3118",
                      "userId": "5ed9f4d01ca3427b81e17859",
                      "title": "ㄲㄲㄲ",
                      "body": "뚜루룰루루루루루루루~~~",
                      "createdAt": "2020-06-05T08:40:06.001Z",
                      "likes": [],
                      "reports": [],
                      "comments": []
                    }
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        404:
          content:
            application/json:
              examples:
                ERR_NOT_FOUND:
                  $ref: '#/components/responses/ERR_NOT_FOUND'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

    patch:
      tags: ['Board']
      summary: board 도큐먼트 수정
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 수정할 board 도큐먼트의 ObjectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
              required:
                - title
                - body
            examples:
              200:
                value:
                  title: "테스트 글 제목(수정)"
                  body: "테스트 글 내용(수정)"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
        404:
          content:
            application/json:
              examples:
                ERR_NOT_FOUND:
                  $ref: '#/components/responses/ERR_NOT_FOUND'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

    delete:
      tags: ['Board']
      summary: board 도큐먼트 삭제
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 삭제할 board 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        404:
          content:
            application/json:
              examples:
                ERR_NOT_FOUND:
                  $ref: '#/components/responses/ERR_NOT_FOUND'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/analysis:
    get:
      tags: ['Board']
      summary: board 통계 가져오기
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS:
                  value: {
                    "message": "success",
                    "data": [
                      {
                        "boardCnt": 23,
                        "likeCnt": 4,
                        "username": "yewon63"
                      },
                      {
                        "boardCnt": 15,
                        "likeCnt": 2
                      },
                      {
                        "boardCnt": 2,
                        "likeCnt": 0
                      },
                      {
                        "boardCnt": 1,
                        "likeCnt": 1,
                        "username": "띠롱"
                      },
                      {
                        "boardCnt": 1,
                        "likeCnt": 1,
                        "username": "dig"
                      },
                      {
                        "boardCnt": 1,
                        "likeCnt": 0
                      }
                    ]
                  }
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{id}/like:
    post:
      tags: ['Board']
      summary: board 좋아요
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 좋아요 할 board 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{id}/like/cancel:
    delete:
      tags: ['Board']
      summary: board 좋아요 취소
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 좋아요 취소할 board 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{id}/report:
    post:
      tags: ['Board']
      summary: board 신고
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 신고할 board 도큐먼트의 ObjectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  minimum: 1
                  maximum: 4
                value:
                  description: 'You can use it when code is 4'
                  type: string
              required:
                - code
            examples:
              200:
                value:
                  code: 1
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{id}/comment:
    post:
      tags: ['Board']
      summary: board 댓글 추가
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 댓글을 작성할 board 도큐먼트의 ObjectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
              required:
                - value
            examples:
              200:
                value:
                  value: "테스트 댓글"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS:
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{boardId}/comment/{commentId}:
    patch:
      tags: ['Board']
      summary: board 댓글 수정
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: boardId
          required: true
          description: 댓글을 작성된 board 도큐먼트의 ObjectId
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          description: 수정할 comment 도큐먼트의 ObjectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
              required:
                - value
            examples:
              200:
                value:
                  value: "테스트 댓글"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

    delete:
      tags: ['Board']
      summary: board 댓글 삭제
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: boardId
          required: true
          description: 댓글이 작성된 board 도큐먼트의 ObjectId
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          description: 삭제할 comment 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /boards/{boardId}/comment/{commentId}/report:
    post:
      tags: ['Board']
      summary: board 댓글 신고
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: boardId
          required: true
          description: 댓글이 작성된 board 도큐먼트의 ObjectId
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          description: 신고할 comment 도큐먼트의 ObjectId
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  minimum: 1
                  maximum: 4
                value:
                  description: 'You can use it when code is 4'
                  type: string
              required:
                - code
            examples:
              200:
                value:
                  code: 1
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  # /files
  /files:
    get:
      tags: ['File']
      summary: file 컬렉션 가져오기
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /files/download/{id}:
    get:
      tags: ['File']
      summary: file 도큐먼트 가져오기
      parameters:
        - in: path
          name: id
          required: true
          description: 가져올 file 도큐먼트의 ObjectId
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /files/upload:
    post:
      tags: ['File']
      summary: file 도큐먼트 추가
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                newFile:
                  type: string
                  format: binary
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  # /fonts
  /fonts:
    get:
      tags: ['Font']
      summary: font 컬렉션 가져오기
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS:
                  value:
                    message: 'success'
                    data: [
                        {
                            "_id": "5f50d4677d3abb2adbbaf0ff",
                            "fileName": "DX3G1Std-B.otf",
                            "postscriptName": "DX3G1Std-B",
                            "fullName": "DX3G1Std Bold",
                            "familyName": "DX3G1Std Bold",
                            "subfamilyName": "Regular",
                            "copyright": "Copyright 2011 DXKorea Inc. All rights reserved.",
                            "version": "Version 1.0",
                            "__v": 0
                        },
                        {
                            "_id": "5f50d4677d3abb2adbbaf100",
                            "fileName": "HoonSaemaulundongR.ttf",
                            "postscriptName": "HoonSaemaR",
                            "fullName": "1HoonSaemaulundong Regular",
                            "familyName": "1HoonSaemaulundong R",
                            "subfamilyName": "Regular",
                            "copyright": "Copyright (c) 2013 HOON DESIGN. All rights reserved.\r\nwww.hoondesign.co.kr / Tel 070-8278-1187\r\nwebmaster@hoondesign.co.kr",
                            "version": "Version 1.0",
                            "__v": 0
                        },
                        {
                            "_id": "5f50d4677d3abb2adbbaf101",
                            "fileName": "Meslo LG M Regular for Powerline.ttf",
                            "postscriptName": "MesloLGMForPowerline-Regular",
                            "fullName": "Meslo LG M Regular for Powerline",
                            "familyName": "Meslo LG M for Powerline",
                            "subfamilyName": "Regular",
                            "copyright": "Copyright © 2009 Apple Inc. Copyright ©  2006 by Tavmjong Bah. Copyright © 2003 by Bitstream, Inc. All Rights Reserved.",
                            "version": "1.210",
                            "__v": 0
                        }
                    ]
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /fonts/upload:
    post:
      tags: ['Font']
      summary: font 도큐먼트 추가
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                newFile:
                  type: string
                  format: binary
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  # /users
  /users/find-password:
    post:
      tags: ['User']
      summary: 비밀번호 찾기(이메일 제출)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            examples:
              200:
                value:
                  email: "kyw0177@gmail.com"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /users/password:
    patch:
      tags: ['User']
      summary: 회원의 password 변경
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPwd:
                  type: string
                  format: password
                newPwd:
                  type: string
                  format: password
              required:
                - oldPwd
                - newPwd
            examples:
              200:
                value:
                  oldPwd: "asdf1234*"
                  newPwd: "asdf1234"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
                ERR_INVALID_PWD:
                  $ref: '#/components/responses/ERR_INVALID_PWD'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /users/nickname:
    patch:
      tags: ['User']
      summary: 회원의 nickname 변경
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
              required:
                - nickname
            examples:
              200:
                value:
                  nickname: "테스트용 닉네임"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
                ERR_EXIST_NICKNAME:
                  $ref: '#/components/responses/ERR_EXIST_NICKNAME'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'

  /users/info:
    patch:
      tags: ['User']
      summary: 회원정보 변경
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                birthDay:
                  type: string
                  format: date
            examples:
              "200 - 1":
                value:
                  address: "테스트용 닉네임"
                  birthDay: "2001-01-01"
              "200 - 2":
                value:
                  address: "테스트용 닉네임"
              "200 - 3":
                value:
                  birthDay: "2001-01-01"
      responses:
        200:
          content:
            application/json:
              examples:
                SUCCESS: 
                  $ref: '#/components/responses/SUCCESS'
        400:
          content:
            application/json:
              examples:
                ERR_INVALID_PARAM:
                  $ref: '#/components/responses/ERR_INVALID_PARAM'
                ERR_EXIST_NICKNAME:
                  $ref: '#/components/responses/ERR_EXIST_NICKNAME'
        401:
          description: (Unauthorized) 인증 에러 발생
        500:
          content:
            application/json:
              examples:
                ERR_INTERNAL_ERROR:
                  $ref: '#/components/responses/ERR_INTERNAL_ERROR'